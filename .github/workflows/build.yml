name: Build

on:
  push:
    branches: ["ow-fork-*"]
    tags: ["*-*ow"]

jobs:
  calc_ver:
    # calculate versions from git tags
    runs-on: ubuntu-latest
    outputs:
      project_ver: ${{steps.vers.outputs.project_ver}}
      build_ver: ${{steps.vers.outputs.build_ver}}
      full_ver: ${{steps.vers.outputs.full_ver}}
      release_flag: ${{steps.vers.outputs.release_flag}}
      release_id: ${{ steps.create_release.outputs.id }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Calculate versions
      id: vers
      shell: bash
      run: |
        git fetch --prune --unshallow --tags
        GIT_VERSION=`git describe --tags`
        PROJECT_VERSION=`echo $GIT_VERSION | cut -d- -f1`
        BUILD_VERSION=`echo $GIT_VERSION | cut -d- -f2-3 --output-delimiter=.`
        GIT_CHANGE_NUM=`echo $GIT_VERSION | cut -d- -f3`
        if [[ -n "$GIT_CHANGE_NUM" ]] || [[ "$BUILD_VERSION" < "1" ]]; then
          RELEASE_FLAG=OFF
        else
          RELEASE_FLAG=ON
        fi

        echo "::set-output name=project_ver::$PROJECT_VERSION"
        echo "::set-output name=build_ver::$BUILD_VERSION"
        echo "::set-output name=full_ver::$PROJECT_VERSION-$BUILD_VERSION"
        echo "::set-output name=release_flag::$RELEASE_FLAG"

    - name: Display versions
      run: |
        echo "project_ver=${{steps.vers.outputs.project_ver}}"
        echo "build_ver=${{steps.vers.outputs.build_ver}}"
        echo "full_ver=${{steps.vers.outputs.full_ver}}"
        echo "release_flag=${{steps.vers.outputs.release_flag}}"

    - name: Create Draft Release
      if: ${{ steps.vers.outputs.release_flag == 'ON' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ steps.vers.outputs.full_ver }}"
        release_name:  "v${{ steps.vers.outputs.full_ver }}"
        draft: true
        prerelease: false

  build_linux:
    runs-on: ubuntu-18.04
    needs: [calc_ver]

    steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y sudo git cmake libboost-dev g++ build-essential libssl-dev default-jdk python3 python3-pip liblz4-dev ninja-build
        sudo pip3 install virtualenv
        sudo apt install -y dirmngr gnupg apt-transport-https ca-certificates
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
        sudo sh -c 'echo "deb https://download.mono-project.com/repo/ubuntu stable-bionic main" > /etc/apt/sources.list.d/mono-official-stable.list'
        sudo apt update
        sudo apt install -y mono-complete

    - name: Checkout
      uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/bld

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/bld
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake -D FDB_RELEASE=${{needs.calc_ver.outputs.release_flag}} -DFDB_VERSION_SUFFIX=-${{needs.calc_ver.outputs.build_ver}} -DGENERATE_DEBUG_PACKAGES=OFF -G Ninja ${{github.workspace}}
       
    - name: Build
      working-directory: ${{github.workspace}}/bld
      shell: bash
      run: ninja -j 1

    - name: Build rpms
      working-directory: ${{github.workspace}}/bld
      shell: bash
      run: cpack -G RPM

    - name: Upload client rpm
      uses: actions/upload-artifact@v2
      with:
        name: foundationdb-clients-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm
        path: ${{github.workspace}}/bld/packages/foundationdb-clients-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm

    - name: Release client rpm
      if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/bld/packages/foundationdb-clients-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm
        asset_name: foundationdb-clients-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm
        asset_content_type: application/octet-stream

    - name: Upload client rpm checksum
      uses: actions/upload-artifact@v2
      with:
        name: foundationdb-clients-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm.sha256
        path: ${{github.workspace}}/bld/packages/foundationdb-clients-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm.sha256

    - name: Release client rpm checksum
      if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/bld/packages/foundationdb-clients-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm.sha256
        asset_name: foundationdb-clients-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm.sha256
        asset_content_type: text/plain

    - name: Upload server rpm
      uses: actions/upload-artifact@v2
      with:
        name: foundationdb-server-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm
        path: ${{github.workspace}}/bld/packages/foundationdb-server-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm

    - name: Release server rpm
      if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/bld/packages/foundationdb-server-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm
        asset_name: foundationdb-server-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm
        asset_content_type: application/octet-stream

    - name: Upload server rpm checksum
      uses: actions/upload-artifact@v2
      with:
        name: foundationdb-server-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm.sha256
        path: ${{github.workspace}}/bld/packages/foundationdb-server-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm.sha256

    - name: Release server rpm
      if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/bld/packages/foundationdb-server-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm.sha256
        asset_name: foundationdb-server-${{ needs.calc_ver.outputs.full_ver }}.el7.x86_64.rpm.sha256
        asset_content_type: text/plain

    - name: Upload java bindings
      uses: actions/upload-artifact@v2
      with:
        name: "fdb-java-${{ needs.calc_ver.outputs.full_ver }}.jar"
        path: "${{github.workspace}}/bld/packages/fdb-java-${{ needs.calc_ver.outputs.full_ver }}.jar"

    - name: Release java bindings
      if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "${{github.workspace}}/bld/packages/fdb-java-${{ needs.calc_ver.outputs.full_ver }}.jar"
        asset_name: "fdb-java-${{ needs.calc_ver.outputs.full_ver }}.jar"
        asset_content_type: application/java-archive

  release:
    needs: [calc_ver, build_linux]
    if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
    runs-on: ubuntu-latest
    steps:
      
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.calc_ver.outputs.release_id }}
